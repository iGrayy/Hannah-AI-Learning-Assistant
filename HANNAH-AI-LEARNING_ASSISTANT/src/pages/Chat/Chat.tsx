import { useState, useEffect, useRef } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { Sparkles, Send, ThumbsUp, ThumbsDown, Share2, Upload, Book, PanelLeftClose, PanelLeft, PanelRightClose, PanelRight, Wand2, GitBranch, FileText, ClipboardCheck, StickyNote, Loader2, MoreVertical, Trash2, ChevronDown, ChevronUp, Link as LinkIcon, List, Pencil, Maximize2, Minimize2, User, LogOut, Share } from 'lucide-react'
import './Chat.css'

interface StudioItem {
    id: string
    type: 'mindmap' | 'report' | 'notecard' | 'quiz'
    title: string
    subtitle: string
    status: 'loading' | 'completed'
    timestamp: string
}

interface Source {
    id: string
    title: string
    url: string
    description: string
    icon?: string
}

interface RelatedContent {
    id: string
    title: string
    description: string
    url: string
    source: string
    sourceIcon?: string
    shortTitle?: string
}

interface Message {
    type: string
    content: string
    isStreaming?: boolean
    relatedContent?: RelatedContent[]
}

export default function Chat() {
    const location = useLocation()
    const navigate = useNavigate()
    const initialQuery = location.state?.query || ''

    const [inputValue, setInputValue] = useState('')
    const [isSidebarOpen, setIsSidebarOpen] = useState(true)
    const [isStudioOpen, setIsStudioOpen] = useState(true)
    const [studioItems, setStudioItems] = useState<StudioItem[]>([])
    const [showReportModal, setShowReportModal] = useState(false)
    const [showReportFormatModal, setShowReportFormatModal] = useState(false)
    const [showMindmapModal, setShowMindmapModal] = useState(false)
    const [showNotecardModal, setShowNotecardModal] = useState(false)
    const [showQuizModal, setShowQuizModal] = useState(false)
    const [showQuizSideModal, setShowQuizSideModal] = useState(false)
    const [selectedMindmapId, setSelectedMindmapId] = useState<string | null>(null)
    const [selectedNotecardId, setSelectedNotecardId] = useState<string | null>(null)
    const [selectedQuizId, setSelectedQuizId] = useState<string | null>(null)
    const [selectedReportId, setSelectedReportId] = useState<string | null>(null)
    const [currentCardIndex, setCurrentCardIndex] = useState(0)
    const [isCardFlipped, setIsCardFlipped] = useState(false)
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({})
    const [openMenuId, setOpenMenuId] = useState<string | null>(null)
    const [expandedSources, setExpandedSources] = useState<{ [key: string]: boolean }>({})
    const [showCustomizeModal, setShowCustomizeModal] = useState(false)
    const [showAvatarMenu, setShowAvatarMenu] = useState(false)
    const [showShareModal, setShowShareModal] = useState(false)
    const [shareEmail, setShareEmail] = useState('')
    const [sharePermission, setSharePermission] = useState<'view' | 'edit'>('view')
    const [notifyPeople, setNotifyPeople] = useState(true)
    const [generalAccess, setGeneralAccess] = useState<'restricted' | 'anyone'>('restricted')
    const [showAccessDropdown, setShowAccessDropdown] = useState(false)
    const avatarMenuRef = useRef<HTMLDivElement>(null)
    const shareModalRef = useRef<HTMLDivElement>(null)
    const accessDropdownRef = useRef<HTMLDivElement>(null)
    const [selectedFeatureType, setSelectedFeatureType] = useState<'mindmap' | 'notecard' | 'quiz' | null>(null)
    const [customizeTab, setCustomizeTab] = useState<'conversation' | 'course'>('conversation')
    const [cardQuantity, setCardQuantity] = useState<number>(6) // Default: 6 (Ti√™u chu·∫©n)
    const [cardDifficulty, setCardDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium')
    const [cardTopic, setCardTopic] = useState('')
    const [selectedCourseCode, setSelectedCourseCode] = useState('')
    const [courseSearchQuery, setCourseSearchQuery] = useState('')
    const [showCourseDropdown, setShowCourseDropdown] = useState(false)
    const [messages, setMessages] = useState<Message[]>([
        {
            type: 'user',
            content: initialQuery
        },
        {
            type: 'assistant',
            content: `**L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP)** l√† m·ªôt m√¥ h√¨nh l·∫≠p tr√¨nh c·∫•u tr√∫c ph·∫ßn m·ªÅm xung quanh **c√°c ƒë·ªëi t∆∞·ª£ng**, thay v√¨ c√°c h√†m ho·∫∑c logic. H√£y nghƒ© v·ªÅ n√≥ nh∆∞ vi·ªác m√¥ h√¨nh h√≥a c√°c th·ª±c th·ªÉ trong th·∫ø gi·ªõi th·ª±c v√† c√°c t∆∞∆°ng t√°c c·ªßa ch√∫ng trong code c·ªßa b·∫°n.

### B·ª©c tranh to√†n c·∫£nh

#### Hi·ªÉu kh√°i ni·ªám c·ªët l√µi c·ªßa OOP v√† l·ª£i √≠ch c·ªßa n√≥

**Chuy·ªÉn ƒë·ªïi m√¥ h√¨nh**
OOP ƒë·∫°i di·ªán cho m·ªôt c√°ch suy nghƒ© kh√°c v·ªÅ l·∫≠p tr√¨nh - t·∫≠p trung v√†o d·ªØ li·ªáu v√† h√†nh vi c√πng nhau.

**M√¥ h√¨nh h√≥a th·ª±c t·∫ø**
C√°c ƒë·ªëi t∆∞·ª£ng ph·∫£n √°nh c√°c th·ª±c th·ªÉ trong th·∫ø gi·ªõi th·ª±c, l√†m cho code tr·ªü n√™n tr·ª±c quan v√† d·ªÖ b·∫£o tr√¨ h∆°n.

OOP mang l·∫°i nhi·ªÅu l·ª£i th·∫ø, bao g·ªìm:

[INTERACTIVE_LIST:∆Øu ƒëi·ªÉm c·ªßa OOP]
[SOURCE:1:T√≠nh m√¥-ƒëun:üî∑:Code ƒë∆∞·ª£c t·ªï ch·ª©c th√†nh c√°c ƒë·ªëi t∆∞·ª£ng ƒë·ªôc l·∫≠p, gi√∫p qu·∫£n l√Ω v√† hi·ªÉu d·ªÖ d√†ng h∆°n.:https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming]
[SOURCE:2:Kh·∫£ nƒÉng t√°i s·ª≠ d·ª•ng:üîÑ:C√°c ƒë·ªëi t∆∞·ª£ng v√† l·ªõp c√≥ th·ªÉ ƒë∆∞·ª£c t√°i s·ª≠ d·ª•ng trong nhi·ªÅu ph·∫ßn kh√°c nhau c·ªßa ch∆∞∆°ng tr√¨nh ho·∫∑c trong c√°c d·ª± √°n kh√°c, gi·∫£m th·ªùi gian ph√°t tri·ªÉn.:https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/]
[SOURCE:3:D·ªÖ b·∫£o tr√¨:üîß:Thay ƒë·ªïi m·ªôt ƒë·ªëi t∆∞·ª£ng √≠t c√≥ kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c ph·∫ßn kh√°c c·ªßa ch∆∞∆°ng tr√¨nh.:https://stackoverflow.com/questions/1031273/what-is-polymorphism-what-is-it-for-and-how-is-it-used]
[/INTERACTIVE_LIST]

**L·ª£i √≠ch c·ªßa OOP**
- T·ªï ch·ª©c code t·ªët h∆°n
- Kh·∫£ nƒÉng t√°i s·ª≠ d·ª•ng th√¥ng qua k·∫ø th·ª´a
- B·∫£o tr√¨ v√† c·∫≠p nh·∫≠t d·ªÖ d√†ng h∆°n
- Thi·∫øt k·∫ø tr·ª±c quan h∆°n

[VIDEO_CONTENT:Gi·∫£i th√≠ch v·ªÅ L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng:https://www.youtube.com/embed/pTB0EiLXUC8]

[RELATED_CONTENT:Kh√°m ph√° n·ªôi dung li√™n quan]
[CONTENT:1:L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng l√† m·ªôt m√¥ h√¨nh l·∫≠p tr√¨nh:T√¨m hi·ªÉu t·ªïng quan v·ªÅ l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng tr√™n Wikipedia.:https://en.wikipedia.org/wiki/Object-oriented_programming:Wikipedia:W:OOP]
[CONTENT:2:Java OOP (L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng):Kh√°m ph√° c√°ch OOP ƒë∆∞·ª£c tri·ªÉn khai trong Java.:https://www.w3schools.com/java/java_oop.asp:W3Schools:W:Java OOP (L·∫≠p tr√¨nh H∆∞·ªõng...]
[CONTENT:3:Thu·∫≠t ng·ªØ OOP:Tra c·ª©u c√°c thu·∫≠t ng·ªØ v√† ƒë·ªãnh nghƒ©a ch√≠nh c·ªßa OOP.:https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/:GeeksforGeeks:G:OOP]
[/RELATED_CONTENT]`,
            isStreaming: false
        }
    ])

    const courseCodes = [
        { code: 'CSD', name: 'C·∫•u tr√∫c d·ªØ li·ªáu v√† gi·∫£i thu·∫≠t' },
        { code: 'CSI', name: 'C∆° s·ªü d·ªØ li·ªáu' },
        { code: 'PRO', name: 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng' },
        { code: 'PRM', name: 'Qu·∫£n l√Ω d·ª± √°n' },
        { code: 'WEB', name: 'Ph√°t tri·ªÉn Web' },
        { code: 'MAD', name: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông' },
        { code: 'DBI', name: 'Thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu' },
        { code: 'OSG', name: 'H·ªá ƒëi·ªÅu h√†nh' }
    ]

    const bigPictureTopics = [
        {
            title: 'Hi·ªÉu kh√°i ni·ªám c·ªët l√µi c·ªßa OOP v√† l·ª£i √≠ch c·ªßa n√≥',
            subtopics: [
                'Chuy·ªÉn ƒë·ªïi m√¥ h√¨nh',
                'M√¥ h√¨nh h√≥a th·ª±c t·∫ø',
                'L·ª£i √≠ch c·ªßa OOP'
            ]
        },
        {
            title: 'M√¥ t·∫£ c√°c kh·ªëi x√¢y d·ª±ng c∆° b·∫£n c·ªßa OOP: ƒê·ªëi t∆∞·ª£ng v√† L·ªõp',
            subtopics: [
                'ƒê·ªëi t∆∞·ª£ng',
                'L·ªõp',
                'Th·ª±c th·ªÉ'
            ]
        },
        {
            title: 'Gi·∫£i th√≠ch c√°c nguy√™n t·∫Øc ch√≠nh c·ªßa OOP',
            subtopics: [
                'ƒê√≥ng g√≥i',
                'Tr·ª´u t∆∞·ª£ng h√≥a',
                'K·∫ø th·ª´a',
                'ƒêa h√¨nh'
            ]
        }
    ]

    const studioFeatures = [
        { icon: GitBranch, title: 'B·∫£n ƒë·ªì t∆∞ duy', description: 'Mind map', type: 'mindmap' as const, note: 'T·∫°o b·∫£n ƒë·ªì t∆∞ duy d·ª±a v√†o n·ªôi dung cu·ªôc tr√≤ chuy·ªán' },
        { icon: FileText, title: 'B√°o c√°o', description: 'Report', type: 'report' as const, note: 'T·∫°o b√°o c√°o d·ª±a v√†o n·ªôi dung cu·ªôc tr√≤ chuy·ªán' },
        { icon: StickyNote, title: 'Th·∫ª ghi nh·ªõ', description: 'Note cards', type: 'notecard' as const, note: 'T·∫°o th·∫ª ghi nh·ªõ d·ª±a v√†o n·ªôi dung cu·ªôc tr√≤ chuy·ªán' },
        { icon: ClipboardCheck, title: 'B√†i ki·ªÉm tra', description: 'Quiz', type: 'quiz' as const, note: 'T·∫°o b√†i ki·ªÉm tra d·ª±a v√†o n·ªôi dung cu·ªôc tr√≤ chuy·ªán' }
    ]

    const getIconForType = (type: string) => {
        switch (type) {
            case 'mindmap': return GitBranch
            case 'report': return FileText
            case 'notecard': return StickyNote
            case 'quiz': return ClipboardCheck
            default: return FileText
        }
    }

    const handleStudioFeatureClick = (type: 'mindmap' | 'report' | 'notecard' | 'quiz', title: string) => {
        if (type === 'report') {
            setShowReportFormatModal(true)
        } else {
            createStudioItem(type, title)
        }
    }

    const createStudioItem = (type: 'mindmap' | 'report' | 'notecard' | 'quiz', title: string) => {
        const newItem: StudioItem = {
            id: Date.now().toString(),
            type,
            title,
            subtitle: 'H√£y quay l·∫°i sau v√†i ph√∫t',
            status: 'loading',
            timestamp: '1 ph√∫t tr∆∞·ªõc'
        }

        setStudioItems(prev => [newItem, ...prev])

        // Simulate completion after 3 seconds
        setTimeout(() => {
            setStudioItems(prev => prev.map(item =>
                item.id === newItem.id
                    ? { ...item, status: 'completed' as const, subtitle: 'ƒê√£ t·∫°o xong' }
                    : item
            ))
        }, 3000)
    }

    const handleReportFormatSelect = (format: string) => {
        createStudioItem('report', `B√°o c√°o - ${format}`)
        setShowReportFormatModal(false)
    }

    const handleCustomizeSubmit = () => {
        if (selectedFeatureType) {
            const featureTitles = {
                'mindmap': 'B·∫£n ƒë·ªì t∆∞ duy',
                'notecard': 'Th·∫ª ghi nh·ªõ',
                'quiz': 'B√†i ki·ªÉm tra'
            }
            createStudioItem(selectedFeatureType, featureTitles[selectedFeatureType])

            // Log the settings for debugging (remove in production)
            console.log('Creating item with settings:', {
                type: selectedFeatureType,
                quantity: cardQuantity,
                difficulty: cardDifficulty,
                topic: cardTopic
            })
        }
        setShowCustomizeModal(false)
        // Reset form
        setCustomizeTab('conversation')
        setCardQuantity(6) // Reset to default 6
        setCardDifficulty('medium')
        setCardTopic('')
        setSelectedCourseCode('')
        setCourseSearchQuery('')
        setShowCourseDropdown(false)
    }

    const handleDeleteItem = (itemId: string) => {
        setStudioItems(prev => prev.filter(item => item.id !== itemId))
        setOpenMenuId(null)
    }

    const toggleMenu = (itemId: string) => {
        setOpenMenuId(openMenuId === itemId ? null : itemId)
    }

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as HTMLElement
            if (!target.closest('.studio-item-menu-container')) {
                setOpenMenuId(null)
            }
            // Close course dropdown when clicking outside
            if (!target.closest('.course-code-dropdown')) {
                setShowCourseDropdown(false)
            }
            // Close avatar menu when clicking outside
            if (avatarMenuRef.current && !avatarMenuRef.current.contains(target)) {
                setShowAvatarMenu(false)
            }
            // Close access dropdown when clicking outside
            if (accessDropdownRef.current && !accessDropdownRef.current.contains(target)) {
                setShowAccessDropdown(false)
            }
        }

        if (openMenuId || showCourseDropdown || showAvatarMenu || showAccessDropdown) {
            document.addEventListener('click', handleClickOutside)
            return () => document.removeEventListener('click', handleClickOutside)
        }
    }, [openMenuId, showCourseDropdown, showAvatarMenu, showAccessDropdown])

    const handleCopyLink = () => {
        const link = window.location.href
        navigator.clipboard.writeText(link)
        alert('ƒê√£ sao ch√©p ƒë∆∞·ªùng li√™n k·∫øt!')
    }

    // Handle keyboard navigation for notecards
    useEffect(() => {
        const handleKeyPress = (event: KeyboardEvent) => {
            if (!showNotecardModal) return

            if (event.key === ' ' || event.key === 'Spacebar') {
                event.preventDefault()
                setIsCardFlipped(prev => !prev)
            } else if (event.key === 'ArrowLeft') {
                event.preventDefault()
                setCurrentCardIndex(prev => Math.max(0, prev - 1))
                setIsCardFlipped(false)
            } else if (event.key === 'ArrowRight') {
                event.preventDefault()
                setCurrentCardIndex(prev => Math.min(104, prev + 1))
                setIsCardFlipped(false)
            }
        }

        if (showNotecardModal) {
            document.addEventListener('keydown', handleKeyPress)
            return () => document.removeEventListener('keydown', handleKeyPress)
        }
    }, [showNotecardModal])

    const handleSend = () => {
        if (!inputValue.trim()) return

        // Add user message
        setMessages(prev => [...prev, {
            type: 'user',
            content: inputValue
        }])

        // Simulate assistant response
        setTimeout(() => {
            setMessages(prev => [...prev, {
                type: 'assistant',
                content: 'ƒê√¢y l√† ph·∫£n h·ªìi m√¥ ph·ªèng. Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, n·ªôi dung n√†y s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng l·ªùi g·ªçi API ƒë·∫øn d·ªãch v·ª• AI.',
                isStreaming: false
            }])
        }, 500)

        setInputValue('')
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSend()
        }
    }

    // Parse interactive list and related content from content
    const parseInteractiveList = (content: string) => {
        const parts: Array<{ type: 'text' | 'interactive-list' | 'related-content' | 'video-content', content: string, title?: string, sources?: Source[], relatedItems?: RelatedContent[], videoUrl?: string, videoTitle?: string }> = []
        const interactiveListRegex = /\[INTERACTIVE_LIST:(.*?)\]([\s\S]*?)\[\/INTERACTIVE_LIST\]/g
        const relatedContentRegex = /\[RELATED_CONTENT:(.*?)\]([\s\S]*?)\[\/RELATED_CONTENT\]/g
        const videoContentRegex = /\[VIDEO_CONTENT:(.*?):(.*?)\]/g

        // Create a combined regex to find all special blocks
        const allMatches: Array<{ type: 'interactive-list' | 'related-content' | 'video-content', match: RegExpExecArray }> = []

        let match
        while ((match = interactiveListRegex.exec(content)) !== null) {
            allMatches.push({ type: 'interactive-list', match })
        }

        while ((match = relatedContentRegex.exec(content)) !== null) {
            allMatches.push({ type: 'related-content', match })
        }

        while ((match = videoContentRegex.exec(content)) !== null) {
            allMatches.push({ type: 'video-content', match })
        }

        // Sort by position
        allMatches.sort((a, b) => a.match.index - b.match.index)

        let lastIndex = 0

        for (const { type, match } of allMatches) {
            // Add text before this block
            if (match.index > lastIndex) {
                parts.push({
                    type: 'text',
                    content: content.substring(lastIndex, match.index)
                })
            }

            if (type === 'interactive-list') {
                const title = match[1]
                const listContent = match[2]
                const sources: Source[] = []

                // Parse sources
                const sourceRegex = /\[SOURCE:(\d+):(.*?):(.*?):(.*?):(.*?)\]/g
                let sourceMatch

                while ((sourceMatch = sourceRegex.exec(listContent)) !== null) {
                    sources.push({
                        id: sourceMatch[1],
                        title: sourceMatch[2],
                        icon: sourceMatch[3],
                        description: sourceMatch[4],
                        url: sourceMatch[5]
                    })
                }

                parts.push({
                    type: 'interactive-list',
                    content: listContent,
                    title,
                    sources
                })
            } else if (type === 'video-content') {
                const videoTitle = match[1]
                const videoUrl = match[2]

                parts.push({
                    type: 'video-content',
                    content: '',
                    videoTitle,
                    videoUrl
                })
            } else if (type === 'related-content') {
                const title = match[1]
                const contentBlock = match[2]
                const relatedItems: RelatedContent[] = []

                // Parse related content items: [CONTENT:id:title:description:url:source:sourceIcon:shortTitle]
                const contentRegex = /\[CONTENT:(\d+):(.*?):(.*?):(.*?):(.*?):(.*?):(.*?)\]/g
                let contentMatch

                while ((contentMatch = contentRegex.exec(contentBlock)) !== null) {
                    relatedItems.push({
                        id: contentMatch[1],
                        title: contentMatch[2],
                        description: contentMatch[3],
                        url: contentMatch[4],
                        source: contentMatch[5],
                        sourceIcon: contentMatch[6],
                        shortTitle: contentMatch[7]
                    })
                }

                parts.push({
                    type: 'related-content',
                    content: contentBlock,
                    title,
                    relatedItems
                })
            }

            lastIndex = match.index + match[0].length
        }

        // Add remaining text
        if (lastIndex < content.length) {
            parts.push({
                type: 'text',
                content: content.substring(lastIndex)
            })
        }

        return parts.length > 0 ? parts : [{ type: 'text' as const, content }]
    }

    // Auto-expand all interactive lists when messages change
    useEffect(() => {
        const newExpandedState: { [key: string]: boolean } = {}

        messages.forEach((message, messageIndex) => {
            const parts = parseInteractiveList(message.content)

            parts.forEach((part, partIndex) => {
                if (part.type === 'interactive-list') {
                    newExpandedState[`${messageIndex}-${partIndex}`] = true
                }
            })
        })

        setExpandedSources(newExpandedState)
    }, [messages])

    const renderMessageContent = (content: string, messageIndex: number) => {
        const parts = parseInteractiveList(content)

        return parts.map((part, partIndex) => {
            if (part.type === 'interactive-list') {
                return (
                    <div key={`part-${partIndex}`} className="message-sources">
                        <button
                            className="sources-toggle"
                            onClick={() => setExpandedSources(prev => ({
                                ...prev,
                                [`${messageIndex}-${partIndex}`]: !prev[`${messageIndex}-${partIndex}`]
                            }))}
                        >
                            <List size={18} />
                            <span className="sources-label">Interactive List</span>
                            <span className="sources-title">{part.title}</span>
                            {expandedSources[`${messageIndex}-${partIndex}`] ? (
                                <ChevronUp size={18} className="sources-chevron" />
                            ) : (
                                <ChevronDown size={18} className="sources-chevron" />
                            )}
                        </button>

                        {expandedSources[`${messageIndex}-${partIndex}`] && (
                            <div className="sources-list">
                                {part.sources?.map((source) => (
                                    <a
                                        key={source.id}
                                        href={source.url}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="source-item"
                                    >
                                        <div className="source-icon-wrapper">
                                            {source.icon ? (
                                                <span className="source-icon-emoji">{source.icon}</span>
                                            ) : (
                                                <div className="source-icon-placeholder">
                                                    <Book size={24} />
                                                </div>
                                            )}
                                        </div>
                                        <div className="source-content">
                                            <h4 className="source-title">{source.title}</h4>
                                            <p className="source-description">{source.description}</p>
                                        </div>
                                        <button className="source-link-btn" aria-label="Open link">
                                            <LinkIcon size={20} />
                                        </button>
                                    </a>
                                ))}
                            </div>
                        )}
                    </div>
                )
            } else if (part.type === 'video-content') {
                return (
                    <div key={`part-${partIndex}`} className="video-content-container">
                        <h3 className="video-content-title">{part.videoTitle || 'Related Video'}</h3>
                        <div className="video-wrapper">
                            <iframe
                                src={part.videoUrl}
                                title={part.videoTitle || 'Video'}
                                frameBorder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowFullScreen
                                className="video-iframe"
                            />
                        </div>
                    </div>
                )
            } else if (part.type === 'related-content') {
                return (
                    <div key={`part-${partIndex}`} className="related-content">
                        <h3 className="related-content-title">{part.title}</h3>
                        <div className="related-content-carousel">
                            {part.relatedItems?.map((item) => (
                                <a
                                    key={item.id}
                                    href={item.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="related-content-card"
                                >
                                    <div className="related-card-content">
                                        <h4 className="related-card-title">{item.title}</h4>
                                        <p className="related-card-description">{item.description}</p>
                                    </div>
                                    <div className="related-card-footer">
                                        <div className="related-card-info">
                                            <div className="related-card-short-title">{item.shortTitle || item.title}</div>
                                            <div className="related-card-source">
                                                {item.sourceIcon && (
                                                    <span className="source-icon-badge">{item.sourceIcon}</span>
                                                )}
                                                {/* <span className="source-name">{item.source}</span> */}
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            ))}
                        </div>
                    </div>
                )
            } else {
                return (
                    <div key={`part-${partIndex}`} className="message-text">
                        {part.content.split('\n').map((line: string, i: number) => {
                            // Handle bold text
                            if (line.includes('**')) {
                                const parts = line.split('**')
                                return (
                                    <p key={i}>
                                        {parts.map((linePart: string, j: number) =>
                                            j % 2 === 1 ? <strong key={j}>{linePart}</strong> : linePart
                                        )}
                                    </p>
                                )
                            }
                            // Handle headings
                            if (line.startsWith('### ')) {
                                return <h3 key={i}>{line.replace('### ', '')}</h3>
                            }
                            if (line.startsWith('#### ')) {
                                return <h4 key={i}>{line.replace('#### ', '')}</h4>
                            }
                            // Handle list items
                            if (line.startsWith('- ')) {
                                return <li key={i}>{line.replace('- ', '')}</li>
                            }
                            // Regular paragraph
                            if (line.trim()) {
                                return <p key={i}>{line}</p>
                            }
                            return null
                        })}
                    </div>
                )
            }
        })
    }

    return (
        <div className="chat-container">
            {/* Header */}
            <header className="chat-header">
                <div className="chat-header-left">
                    <div className="chat-logo" onClick={() => navigate('/learn')}>
                        <Sparkles size={24} color="#4285F4" />
                        <span className="chat-logo-text">Hannah Assistant</span>
                    </div>
                </div>
                <div className="chat-header-right">
                    <button className="share-btn" onClick={() => setShowShareModal(true)}>
                        <Share2 size={20} />
                        <span>Chia s·∫ª</span>
                    </button>
                    <div className="avatar-menu-container" ref={avatarMenuRef}>
                        <button
                            className="avatar-btn"
                            aria-label="H·ªì s∆° ng∆∞·ªùi d√πng"
                            onClick={() => setShowAvatarMenu(!showAvatarMenu)}
                        >
                            <img
                                src="https://ui-avatars.com/api/?name=User&background=4285F4&color=fff&size=32"
                                alt="·∫¢nh ƒë·∫°i di·ªán"
                                className="avatar-image"
                            />
                        </button>
                        {showAvatarMenu && (
                            <div className="avatar-dropdown">
                                <button className="avatar-dropdown-item" onClick={() => navigate('/profile')}>
                                    <User size={18} />
                                    <span>H·ªì s∆°</span>
                                </button>
                                <button className="avatar-dropdown-item">
                                    <LogOut size={18} />
                                    <span>ƒêƒÉng xu·∫•t</span>
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </header>

            {/* Main Chat Area */}
            <main className="chat-main">
                {/* Sidebar - The Big Picture */}
                <aside className={`sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>
                    <div className="sidebar-content">
                        <div className="sidebar-header">
                            <Book size={20} color="#5f6368" />
                            <h3 className="sidebar-title">B·ª©c tranh to√†n c·∫£nh</h3>
                            {/* Sidebar Toggle Button */}
                            <button
                                className="sidebar-toggle-btn"
                                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                                aria-label={isSidebarOpen ? '·∫®n thanh b√™n' : 'Hi·ªán thanh b√™n'}
                            >
                                {isSidebarOpen ? <PanelLeftClose size={18} /> : <PanelLeft size={18} />}
                            </button>
                        </div>
                        <h4 className="sidebar-main-title">L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP)</h4>

                        <div className="topics-list">
                            {bigPictureTopics.map((topic, index) => (
                                <div key={index} className="topic-item">
                                    <button className="topic-button">
                                        <span className="topic-title">{topic.title}</span>
                                    </button>
                                    <div className="subtopics-list">
                                        {topic.subtopics.map((subtopic, subIndex) => (
                                            <button key={subIndex} className="subtopic-button">
                                                {subtopic}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </aside>

                <div className="chat-content">
                    {/* Welcome Banner */}
                    <div className="welcome-banner">
                        <div className="welcome-banner-icon">
                            <img src="https://www.gstatic.com/lamda/images/gemini_sparkle_v002_d4735304ff6292a690345.svg" alt="H·ªçc v·ªÅ" />
                        </div>
                        <div className="welcome-banner-content">
                            <h2 className="welcome-banner-title">Ch√†o m·ª´ng ƒë·∫øn v·ªõi Hannah Assistant</h2>
                            <p className="welcome-banner-description">
                                N·∫Øm b·∫Øt c√°c ch·ªß ƒë·ªÅ m·ªõi v√† hi·ªÉu s√¢u h∆°n v·ªõi c√¥ng c·ª• h·ªçc t·∫≠p ƒë√†m tho·∫°i
                            </p>
                            <button className="topic-badge">OOP</button>
                        </div>
                        <button className="close-banner-btn" aria-label="ƒê√≥ng">√ó</button>
                    </div>

                    {/* Messages */}
                    <div className="messages-container">
                        {messages.map((message, index) => (
                            <div key={index} className={`message ${message.type}-message`}>
                                {message.type === 'assistant' && (
                                    <div className="message-avatar">
                                        <Sparkles size={20} color="#4285F4" />
                                    </div>
                                )}
                                <div className="message-content">
                                    {renderMessageContent(message.content, index)}
                                    {message.type === 'assistant' && (
                                        <>
                                            <div className="message-actions-container">
                                                <div className="message-suggestions">
                                                    <button className="suggestion-btn">
                                                        <span className="suggestion-icon">‚â°</span>
                                                        <span>ƒê∆°n gi·∫£n h√≥a</span>
                                                    </button>
                                                    <button className="suggestion-btn">
                                                        <span className="suggestion-icon">‚â°</span>
                                                        <span>T√¨m hi·ªÉu s√¢u h∆°n</span>
                                                    </button>
                                                    <button className="suggestion-btn">
                                                        <span className="suggestion-icon">üñº</span>
                                                        <span>L·∫•y h√¨nh ·∫£nh</span>
                                                    </button>
                                                </div>
                                                <div className="message-actions">
                                                    <button className="action-btn" aria-label="Ph·∫£n h·ªìi t·ªët">
                                                        <ThumbsUp size={16} />
                                                    </button>
                                                    <button className="action-btn" aria-label="Ph·∫£n h·ªìi kh√¥ng t·ªët">
                                                        <ThumbsDown size={16} />
                                                    </button>
                                                    <button className="action-btn" aria-label="Chia s·∫ª">
                                                        <Share2 size={16} />
                                                    </button>
                                                </div>
                                            </div>
                                            <div className="follow-up-questions">
                                                <button className="follow-up-btn">Cho t√¥i bi·∫øt th√™m v·ªÅ l·ªõp v√† ƒë·ªëi t∆∞·ª£ng.</button>
                                                <button className="follow-up-btn">Gi·∫£i th√≠ch chi ti·∫øt h∆°n v·ªÅ ƒë√≥ng g√≥i.</button>
                                                <button className="follow-up-btn">M·ªôt s·ªë ng√¥n ng·ªØ l·∫≠p tr√¨nh s·ª≠ d·ª•ng OOP l√† g√¨?</button>
                                            </div>
                                        </>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Notice */}
                    <div className="chat-notice">
                        Hannah hi·ªán ch·ªâ kh·∫£ d·ª•ng b·∫±ng ti·∫øng Vi·ªát.
                    </div>

                    {/* Input Area */}
                    <div className="chat-input-container">
                        <div className="chat-input-wrapper">
                            <input
                                type="text"
                                placeholder="Nh·∫≠p ho·∫∑c chia s·∫ª t·ªáp tin..."
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                className="chat-input"
                            />
                            <button className="upload-file-btn" aria-label="T·∫£i l√™n t·ªáp tin">
                                <Upload size={20} />
                            </button>
                            <button
                                className={`send-btn ${inputValue.trim() ? 'active' : ''}`}
                                onClick={handleSend}
                                disabled={!inputValue.trim()}
                                aria-label="G·ª≠i tin nh·∫Øn"
                            >
                                <Send size={20} />
                            </button>
                        </div>
                        <p className="chat-disclaimer">
                            Ph·∫£n h·ªìi t·ª´ AI c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c ho·∫∑c g√¢y hi·ªÉu l·∫ßm. H√£y ki·ªÉm tra k·ªπ ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c.
                        </p>
                    </div>
                </div>

                {/* Studio Sidebar - Right */}
                <aside className={`studio-sidebar ${isStudioOpen ? 'open' : 'closed'}`}>
                    <div className="studio-content">
                        <div className="studio-header">
                            <Wand2 size={20} color="#5f6368" />
                            <h3 className="studio-title">Studio</h3>
                            {/* Studio Toggle Button */}
                            <button
                                className="studio-toggle-btn"
                                onClick={() => setIsStudioOpen(!isStudioOpen)}
                                aria-label={isStudioOpen ? '·∫®n studio' : 'Hi·ªán studio'}
                            >
                                {isStudioOpen ? <PanelRightClose size={18} /> : <PanelRight size={18} />}
                            </button>
                        </div>

                        <div className="studio-features">
                            {studioFeatures.map((feature, index) => {
                                const IconComponent = feature.icon
                                return (
                                    <div key={index} className="studio-feature-card-wrapper">
                                        <button
                                            className="studio-feature-card"
                                            onClick={() => handleStudioFeatureClick(feature.type, feature.title)}
                                            title={feature.note}
                                        >
                                            {feature.type !== 'report' && (
                                                <button
                                                    className="studio-feature-edit-btn"
                                                    onClick={(e) => {
                                                        e.stopPropagation()
                                                        setSelectedFeatureType(feature.type)
                                                        setShowCustomizeModal(true)
                                                    }}
                                                    aria-label="Edit feature"
                                                >
                                                    <Pencil size={14} />
                                                </button>
                                            )}
                                            <IconComponent size={24} color="#5f6368" />
                                            <span className="feature-title">{feature.title}</span>
                                        </button>
                                    </div>
                                )
                            })}
                        </div>

                        {/* Studio Items List or Empty State */}
                        {studioItems.length > 0 ? (
                            <div className="studio-items-list">
                                {studioItems.map((item) => {
                                    const IconComponent = getIconForType(item.type)
                                    return (
                                        <div key={item.id} className="studio-item">
                                            <div
                                                className="studio-item-clickable"
                                                onClick={() => {
                                                    if (item.status === 'completed') {
                                                        if (item.type === 'mindmap') {
                                                            setSelectedMindmapId(item.id)
                                                            setShowMindmapModal(true)
                                                        } else if (item.type === 'notecard') {
                                                            setSelectedNotecardId(item.id)
                                                            setCurrentCardIndex(0)
                                                            setIsCardFlipped(false)
                                                            setShowNotecardModal(true)
                                                        } else if (item.type === 'quiz') {
                                                            setSelectedQuizId(item.id)
                                                            setCurrentQuestionIndex(0)
                                                            setSelectedAnswers({})
                                                            setShowQuizSideModal(true)
                                                        } else if (item.type === 'report') {
                                                            setSelectedReportId(item.id)
                                                            setShowReportModal(true)
                                                        }
                                                    }
                                                }}
                                                style={{ cursor: item.status === 'completed' && (item.type === 'mindmap' || item.type === 'notecard' || item.type === 'quiz' || item.type === 'report') ? 'pointer' : 'default' }}
                                            >
                                                <div className="studio-item-icon">
                                                    {item.status === 'loading' ? (
                                                        <Loader2 size={20} color="#5f6368" className="spinning" />
                                                    ) : (
                                                        <IconComponent size={20} color="#5f6368" />
                                                    )}
                                                </div>
                                                <div className="studio-item-content">
                                                    <h4 className="studio-item-title">{item.title}</h4>
                                                    <p className="studio-item-subtitle">
                                                        {item.subtitle} ‚Ä¢ {item.timestamp}
                                                    </p>
                                                </div>
                                            </div>
                                            <div className="studio-item-menu-container">
                                                <button
                                                    className="studio-item-menu"
                                                    aria-label="Th√™m t√πy ch·ªçn"
                                                    onClick={() => toggleMenu(item.id)}
                                                >
                                                    <MoreVertical size={20} color="#5f6368" />
                                                </button>
                                                {openMenuId === item.id && (
                                                    <div className="studio-item-dropdown">
                                                        <button
                                                            className="dropdown-item delete-item"
                                                            onClick={() => handleDeleteItem(item.id)}
                                                        >
                                                            <Trash2 size={16} />
                                                            <span>X√≥a</span>
                                                        </button>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    )
                                })}
                            </div>
                        ) : (
                            <div className="studio-description">
                                <Wand2 size={40} color="#9aa0a6" className="studio-icon" />
                                <p className="studio-subtitle">ƒê·∫ßu ra c·ªßa Studio s·∫Ω ƒë∆∞·ª£c l∆∞u ·ªü ƒë√¢y.</p>
                                <p className="studio-text">
                                    Sau khi th√™m ngu·ªìn, h√£y nh·∫≠p ƒë·ªÉ th√™m T·ªïng quan b·∫£ng √¢m thanh, H∆∞·ªõng d·∫´n h·ªçc t·∫≠p, B·∫£n ƒë·ªì t∆∞ duy v√† nhi·ªÅu th√¥ng tin kh√°c!
                                </p>
                            </div>
                        )}
                    </div>
                </aside>
            </main>

            {/* Report Format Selection Modal */}
            {showReportFormatModal && (
                <div className="modal-overlay" onClick={() => setShowReportFormatModal(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <h3 className="modal-title">Ch·ªçn ƒë·ªãnh d·∫°ng b√°o c√°o</h3>
                        <div className="report-formats">
                            <button
                                className="format-option"
                                onClick={() => handleReportFormatSelect('T·ªïng quan')}
                            >
                                <FileText size={24} />
                                <span>T·ªïng quan</span>
                            </button>
                            <button
                                className="format-option"
                                onClick={() => handleReportFormatSelect('Chi ti·∫øt')}
                            >
                                <FileText size={24} />
                                <span>Chi ti·∫øt</span>
                            </button>
                            <button
                                className="format-option"
                                onClick={() => handleReportFormatSelect('T√≥m t·∫Øt')}
                            >
                                <FileText size={24} />
                                <span>T√≥m t·∫Øt</span>
                            </button>
                        </div>
                        <button className="modal-close" onClick={() => setShowReportFormatModal(false)}>
                            H·ªßy
                        </button>
                    </div>
                </div>
            )}

            {/* Report Display Modal */}
            {showReportModal && (
                <div className="report-modal-overlay" onClick={() => setShowReportModal(false)}>
                    <div className="report-modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="report-modal-header">
                            <h2 className="report-modal-title">B√°o c√°o - T·ªïng quan</h2>
                            <p className="report-modal-subtitle">D·ª±a tr√™n 1 ngu·ªìn</p>
                            <button
                                className="report-modal-close"
                                onClick={() => setShowReportModal(false)}
                                aria-label="ƒê√≥ng"
                            >
                                √ó
                            </button>
                        </div>

                        <div className="report-content-container">
                            <div className="report-section">
                                <h3 className="report-section-title">T√≥m t·∫Øt ch√≠nh</h3>
                                <p className="report-text">
                                    L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP) l√† m·ªôt m√¥ h√¨nh l·∫≠p tr√¨nh c·∫•u tr√∫c ph·∫ßn m·ªÅm xung quanh c√°c ƒë·ªëi t∆∞·ª£ng,
                                    thay v√¨ c√°c h√†m ho·∫∑c logic. ƒê√¢y l√† c√°ch m√¥ h√¨nh h√≥a c√°c th·ª±c th·ªÉ trong th·∫ø gi·ªõi th·ª±c v√† c√°c t∆∞∆°ng t√°c
                                    c·ªßa ch√∫ng trong code c·ªßa b·∫°n.
                                </p>
                            </div>

                            <div className="report-section">
                                <h3 className="report-section-title">Kh√°i ni·ªám c·ªët l√µi</h3>
                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">1. Chuy·ªÉn ƒë·ªïi m√¥ h√¨nh (Paradigm Shift)</h4>
                                    <p className="report-text">
                                        OOP ƒë·∫°i di·ªán cho m·ªôt c√°ch suy nghƒ© kh√°c v·ªÅ l·∫≠p tr√¨nh - t·∫≠p trung v√†o d·ªØ li·ªáu v√† h√†nh vi c√πng nhau.
                                        Thay v√¨ vi·∫øt c√°c h√†m ri√™ng l·∫ª x·ª≠ l√Ω d·ªØ li·ªáu, OOP k·∫øt h·ª£p d·ªØ li·ªáu v√† c√°c ph∆∞∆°ng th·ª©c ho·∫°t ƒë·ªông
                                        tr√™n d·ªØ li·ªáu ƒë√≥ th√†nh c√°c ƒë∆°n v·ªã ƒë·ªôc l·∫≠p g·ªçi l√† ƒë·ªëi t∆∞·ª£ng.
                                    </p>
                                </div>

                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">2. M√¥ h√¨nh h√≥a th·ª±c t·∫ø (Modeling Reality)</h4>
                                    <p className="report-text">
                                        C√°c ƒë·ªëi t∆∞·ª£ng ph·∫£n √°nh c√°c th·ª±c th·ªÉ trong th·∫ø gi·ªõi th·ª±c, l√†m cho code tr·ªü n√™n tr·ª±c quan v√† d·ªÖ b·∫£o tr√¨ h∆°n.
                                        V√≠ d·ª•, m·ªôt ƒë·ªëi t∆∞·ª£ng "Xe" c√≥ th·ªÉ c√≥ thu·ªôc t√≠nh nh∆∞ m√†u s·∫Øc, t·ªëc ƒë·ªô v√† c√°c ph∆∞∆°ng th·ª©c nh∆∞ kh·ªüi ƒë·ªông, d·ª´ng.
                                    </p>
                                </div>

                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">3. L·ª£i √≠ch c·ªßa OOP</h4>
                                    <ul className="report-list">
                                        <li>T·ªï ch·ª©c code t·ªët h∆°n: M√£ ngu·ªìn ƒë∆∞·ª£c c·∫•u tr√∫c r√µ r√†ng v√† logic</li>
                                        <li>T√°i s·ª≠ d·ª•ng th√¥ng qua k·∫ø th·ª´a: Gi·∫£m thi·ªÉu code tr√πng l·∫∑p</li>
                                        <li>D·ªÖ b·∫£o tr√¨ v√† c·∫≠p nh·∫≠t: Thay ƒë·ªïi c·ª•c b·ªô kh√¥ng ·∫£nh h∆∞·ªüng to√†n h·ªá th·ªëng</li>
                                        <li>Thi·∫øt k·∫ø tr·ª±c quan h∆°n: D·ªÖ hi·ªÉu v√† ph√°t tri·ªÉn</li>
                                    </ul>
                                </div>
                            </div>

                            <div className="report-section">
                                <h3 className="report-section-title">C√°c kh·ªëi x√¢y d·ª±ng c∆° b·∫£n</h3>
                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">Objects (ƒê·ªëi t∆∞·ª£ng)</h4>
                                    <p className="report-text">
                                        ƒê·ªëi t∆∞·ª£ng l√† c√°c th·ª±c th·ªÉ c√≥ tr·∫°ng th√°i (thu·ªôc t√≠nh) v√† h√†nh vi (ph∆∞∆°ng th·ª©c).
                                        Ch√∫ng ƒë·∫°i di·ªán cho c√°c kh√°i ni·ªám c·ª• th·ªÉ trong ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n.
                                    </p>
                                </div>

                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">Classes (L·ªõp)</h4>
                                    <p className="report-text">
                                        L·ªõp l√† b·∫£n thi·∫øt k·∫ø ho·∫∑c m·∫´u ƒë·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng. Ch√∫ng ƒë·ªãnh nghƒ©a c·∫•u tr√∫c v√† h√†nh vi
                                        m√† c√°c ƒë·ªëi t∆∞·ª£ng c·ªßa l·ªõp ƒë√≥ s·∫Ω c√≥.
                                    </p>
                                </div>

                                <div className="report-subsection">
                                    <h4 className="report-subsection-title">Instances (Th·ª±c th·ªÉ)</h4>
                                    <p className="report-text">
                                        Th·ª±c th·ªÉ l√† c√°c ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ ƒë∆∞·ª£c t·∫°o ra t·ª´ m·ªôt l·ªõp. M·ªói th·ª±c th·ªÉ c√≥ gi√° tr·ªã
                                        ri√™ng cho c√°c thu·ªôc t√≠nh c·ªßa n√≥.
                                    </p>
                                </div>
                            </div>

                            <div className="report-section">
                                <h3 className="report-section-title">C√°c nguy√™n t·∫Øc ch√≠nh</h3>
                                <div className="report-principles">
                                    <div className="report-principle-card">
                                        <h4 className="report-principle-title">Encapsulation</h4>
                                        <p className="report-principle-text">
                                            ƒê√≥ng g√≥i d·ªØ li·ªáu v√† ph∆∞∆°ng th·ª©c trong m·ªôt ƒë∆°n v·ªã, ·∫©n chi ti·∫øt b√™n trong
                                        </p>
                                    </div>
                                    <div className="report-principle-card">
                                        <h4 className="report-principle-title">Abstraction</h4>
                                        <p className="report-principle-text">
                                            ·∫®n c√°c chi ti·∫øt ph·ª©c t·∫°p, ch·ªâ hi·ªÉn th·ªã c√°c t√≠nh nƒÉng c·∫ßn thi·∫øt
                                        </p>
                                    </div>
                                    <div className="report-principle-card">
                                        <h4 className="report-principle-title">Inheritance</h4>
                                        <p className="report-principle-text">
                                            L·ªõp con k·∫ø th·ª´a thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c t·ª´ l·ªõp cha
                                        </p>
                                    </div>
                                    <div className="report-principle-card">
                                        <h4 className="report-principle-title">Polymorphism</h4>
                                        <p className="report-principle-text">
                                            C√°c ƒë·ªëi t∆∞·ª£ng kh√°c nhau c√≥ th·ªÉ ph·∫£n h·ªìi c√πng m·ªôt th√¥ng ƒëi·ªáp theo c√°ch kh√°c nhau
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <div className="report-section">
                                <h3 className="report-section-title">K·∫øt lu·∫≠n</h3>
                                <p className="report-text">
                                    OOP l√† m·ªôt m√¥ h√¨nh l·∫≠p tr√¨nh m·∫°nh m·∫Ω gi√∫p t·∫°o ra code d·ªÖ hi·ªÉu, d·ªÖ b·∫£o tr√¨ v√† c√≥ th·ªÉ m·ªü r·ªông.
                                    B·∫±ng c√°ch t·ªï ch·ª©c code xung quanh c√°c ƒë·ªëi t∆∞·ª£ng v√† √°p d·ª•ng c√°c nguy√™n t·∫Øc c·ªët l√µi,
                                    l·∫≠p tr√¨nh vi√™n c√≥ th·ªÉ x√¢y d·ª±ng c√°c h·ªá th·ªëng ph·∫ßn m·ªÅm ph·ª©c t·∫°p m·ªôt c√°ch hi·ªáu qu·∫£ h∆°n.
                                </p>
                            </div>
                        </div>

                        <div className="report-modal-footer">
                            <button className="report-action-btn">
                                <ThumbsUp size={18} />
                                N·ªôi dung h·ªØu √≠ch
                            </button>
                            <button className="report-action-btn">
                                <ThumbsDown size={18} />
                                N·ªôi dung kh√¥ng ph√π h·ª£p
                            </button>
                        </div>

                        <p className="report-modal-notice">
                            AI c√≥ th·ªÉ ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c; h√£y ki·ªÉm tra k·ªπ n·ªôi dung b√°o c√°o
                        </p>
                    </div>
                </div>
            )}

            {/* Mindmap Modal */}
            {showMindmapModal && (
                <div className="mindmap-modal-overlay" onClick={() => setShowMindmapModal(false)}>
                    <div className="mindmap-modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="mindmap-modal-header">
                            <h2 className="mindmap-modal-title">N·ªòI DUNG</h2>
                            <p className="mindmap-modal-subtitle">D·ª±a tr√™n 1 ngu·ªìn</p>
                            <button
                                className="mindmap-modal-close"
                                onClick={() => setShowMindmapModal(false)}
                                aria-label="ƒê√≥ng"
                            >
                                √ó
                            </button>
                        </div>
                        <div className="mindmap-container">
                            <div className="mindmap-canvas">
                                {/* Central Node */}
                                <div className="mindmap-central-node">
                                    <div className="mindmap-node mindmap-node-central">
                                        N·ªòI DUNG
                                    </div>
                                </div>

                                {/* Branch 1 - Top */}
                                <div className="mindmap-branch mindmap-branch-top">
                                    <div className="mindmap-connector mindmap-connector-top"></div>
                                    <div className="mindmap-node mindmap-node-primary">
                                        N·ªòI DUNG
                                        <button className="mindmap-expand-btn">‚Ä∫</button>
                                    </div>
                                </div>

                                {/* Branch 2 - Middle */}
                                <div className="mindmap-branch mindmap-branch-middle">
                                    <div className="mindmap-connector mindmap-connector-middle"></div>
                                    <div className="mindmap-node mindmap-node-primary">
                                        N·ªòI DUNG
                                        <button className="mindmap-expand-btn">‚Ä∫</button>
                                    </div>
                                </div>

                                {/* Branch 3 - Bottom */}
                                <div className="mindmap-branch mindmap-branch-bottom">
                                    <div className="mindmap-connector mindmap-connector-bottom"></div>
                                    <div className="mindmap-node mindmap-node-primary">
                                        N·ªòI DUNG
                                        <button className="mindmap-expand-btn">‚Ä∫</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="mindmap-modal-footer">
                            <button className="mindmap-action-btn">
                                <ThumbsUp size={18} />
                                N·ªôi dung hay
                            </button>
                            <button className="mindmap-action-btn">
                                <ThumbsDown size={18} />
                                N·ªôi dung kh√¥ng ph√π h·ª£p
                            </button>
                        </div>
                        {/* <p className="mindmap-modal-notice">
                            Notebook.M c√≥ th·ªÉ ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c; h√£y ki·ªÉm tra k·ªπ c·∫£u tr·∫£ l·ªùi m√† b·∫°n nh·∫≠n ƒë∆∞·ª£c
                        </p> */}
                    </div>
                </div>
            )}

            {/* Notecard (Flashcard) Modal */}
            {showNotecardModal && (
                <div className="notecard-modal-overlay" onClick={() => setShowNotecardModal(false)}>
                    <div className="notecard-modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="notecard-modal-header">
                            <h2 className="notecard-modal-title">Tri·∫øt h·ªçc B·ªô th·ªÉ</h2>
                            <p className="notecard-modal-subtitle">D·ª±a tr√™n 1 ngu·ªìn</p>
                            <button
                                className="notecard-modal-close"
                                onClick={() => setShowNotecardModal(false)}
                                aria-label="ƒê√≥ng"
                            >
                                √ó
                            </button>
                        </div>

                        <div className="notecard-instruction">
                            Nh·∫•n ph√≠m c√°ch ƒë·ªÉ l·∫≠t th·∫ª, nh·∫•n ph√≠m m≈©i t√™n ‚Üê/‚Üí ƒë·ªÉ ƒëi chuy·ªÉn
                        </div>

                        <div className="notecard-container">
                            <button
                                className="notecard-nav-btn notecard-nav-prev"
                                onClick={() => {
                                    setCurrentCardIndex(prev => Math.max(0, prev - 1))
                                    setIsCardFlipped(false)
                                }}
                                disabled={currentCardIndex === 0}
                            >
                                ‚Üê
                            </button>

                            <div
                                className={`notecard ${isCardFlipped ? 'flipped' : ''}`}
                                onClick={() => setIsCardFlipped(!isCardFlipped)}
                            >
                                <div className="notecard-inner">
                                    <div className="notecard-front">
                                        <p className="notecard-text">
                                            C√ÇU H·ªéI?
                                        </p>
                                        <button className="notecard-flip-hint">Xem c√¢u tr·∫£ l·ªùi</button>
                                    </div>
                                    <div className="notecard-back">
                                        <p className="notecard-text">
                                            TR·∫¢ L·ªúI
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <button
                                className="notecard-nav-btn notecard-nav-next"
                                onClick={() => {
                                    setCurrentCardIndex(prev => Math.min(104, prev + 1))
                                    setIsCardFlipped(false)
                                }}
                                disabled={currentCardIndex === 104}
                            >
                                ‚Üí
                            </button>
                        </div>

                        <div className="notecard-progress">
                            <button className="notecard-shuffle-btn">
                                <span>üîÑ</span>
                                B·∫Øt ƒë·∫ßu l·∫°i
                            </button>
                            <span className="notecard-counter">{currentCardIndex + 1} / 105 th·∫ª</span>
                        </div>

                        <div className="notecard-modal-footer">
                            <button className="notecard-action-btn">
                                <ThumbsUp size={18} />
                                N·ªôi dung h·ªØu √≠ch
                            </button>
                            <button className="notecard-action-btn">
                                <ThumbsDown size={18} />
                                N·ªôi dung kh√¥ng ph√π h·ª£p
                            </button>
                        </div>

                        <p className="notecard-modal-notice">
                            Notebook.M c√≥ th·ªÉ ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c; h√£y ki·ªÉm tra k·ªπ c√¢u tr·∫£ l·ªùi m√† b·∫°n nh·∫≠n ƒë∆∞·ª£c
                        </p>
                    </div>
                </div>
            )}

            {/* Quiz Modal */}
            {showQuizModal && (
                <div className="quiz-modal-overlay" onClick={() => setShowQuizModal(false)}>
                    <div className="quiz-modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="quiz-modal-header">
                            <h2 className="quiz-modal-title">Tri·∫øt h·ªçc Tr·∫Øc nghi·ªám</h2>
                            <p className="quiz-modal-subtitle">D·ª±a tr√™n 1 ngu·ªìn</p>
                            <div className="quiz-modal-header-actions">
                                {selectedQuizId && (
                                    <button
                                        className="quiz-modal-minimize"
                                        onClick={() => {
                                            setShowQuizModal(false)
                                            setShowQuizSideModal(true)
                                        }}
                                        aria-label="Thu nh·ªè"
                                        title="Thu nh·ªè"
                                    >
                                        <Minimize2 size={20} />
                                    </button>
                                )}
                                {/* <button 
                                    className="quiz-modal-close" 
                                    onClick={() => setShowQuizModal(false)}
                                    aria-label="ƒê√≥ng"
                                >
                                    √ó
                                </button> */}
                            </div>
                        </div>

                        <div className="quiz-progress-bar">
                            <div className="quiz-progress-indicator">
                                {currentQuestionIndex + 1} / 15
                            </div>
                        </div>

                        <div className="quiz-container">
                            <div className="quiz-question">
                                <p className="quiz-question-text">
                                    C√ÇU H·ªéI?
                                </p>
                            </div>

                            <div className="quiz-answers">
                                <button
                                    className={`quiz-answer-option ${selectedAnswers[currentQuestionIndex] === 'A' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'A' })}
                                >
                                    <span className="quiz-answer-label">A.</span>
                                    <span className="quiz-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-answer-option ${selectedAnswers[currentQuestionIndex] === 'B' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'B' })}
                                >
                                    <span className="quiz-answer-label">B.</span>
                                    <span className="quiz-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-answer-option ${selectedAnswers[currentQuestionIndex] === 'C' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'C' })}
                                >
                                    <span className="quiz-answer-label">C.</span>
                                    <span className="quiz-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-answer-option ${selectedAnswers[currentQuestionIndex] === 'D' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'D' })}
                                >
                                    <span className="quiz-answer-label">D.</span>
                                    <span className="quiz-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>
                            </div>
                        </div>

                        <div className="quiz-navigation">
                            <button
                                className="quiz-nav-btn quiz-hint-btn"
                                onClick={() => {
                                    // Toggle hint functionality
                                }}
                            >
                                G·ª£i √Ω
                            </button>
                            <button
                                className="quiz-nav-btn quiz-next-btn"
                                onClick={() => {
                                    if (currentQuestionIndex < 14) {
                                        setCurrentQuestionIndex(prev => prev + 1)
                                    }
                                }}
                            >
                                Ti·∫øp theo
                            </button>
                        </div>

                        <div className="quiz-modal-footer">
                            <button className="quiz-feedback-btn">
                                <ThumbsUp size={18} />
                                N·ªôi dung h·ªØu √≠ch
                            </button>
                            <button className="quiz-feedback-btn">
                                <ThumbsDown size={18} />
                                N·ªôi dung kh√¥ng ph√π h·ª£p
                            </button>
                        </div>

                        {/* <p className="quiz-modal-notice">
                            Notebook.M c√≥ th·ªÉ ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c; h√£y ki·ªÉm tra k·ªπ c√¢u tr·∫£ l·ªùi m√† b·∫°n nh·∫≠n ƒë∆∞·ª£c
                        </p> */}
                    </div>
                </div>
            )}

            {/* Quiz Side Modal - Positioned next to sidebar */}
            {showQuizSideModal && (
                <div className="quiz-side-modal-overlay">
                    <div className="quiz-side-modal-content">
                        <div className="quiz-side-modal-header">
                            <h2 className="quiz-side-modal-title">B√†i ki·ªÉm tra</h2>
                            <div className="quiz-side-modal-actions">
                                <button
                                    className="quiz-side-expand-btn"
                                    onClick={() => {
                                        setShowQuizSideModal(false)
                                        setShowQuizModal(true)
                                    }}
                                    aria-label="M·ªü r·ªông"
                                >
                                    <Maximize2 size={18} />
                                </button>
                                <button
                                    className="quiz-side-modal-close"
                                    onClick={() => setShowQuizSideModal(false)}
                                    aria-label="ƒê√≥ng"
                                >
                                    √ó
                                </button>
                            </div>
                        </div>

                        <div className="quiz-side-progress-bar">
                            <div className="quiz-side-progress-text">
                                C√¢u {currentQuestionIndex + 1} / 15
                            </div>
                        </div>

                        <div className="quiz-side-container">
                            <div className="quiz-side-question">
                                <p className="quiz-side-question-text">
                                    C√ÇU H·ªéI?
                                </p>
                            </div>

                            <div className="quiz-side-answers">
                                <button
                                    className={`quiz-side-answer-option ${selectedAnswers[currentQuestionIndex] === 'A' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'A' })}
                                >
                                    <span className="quiz-side-answer-label">A.</span>
                                    <span className="quiz-side-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-side-answer-option ${selectedAnswers[currentQuestionIndex] === 'B' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'B' })}
                                >
                                    <span className="quiz-side-answer-label">B.</span>
                                    <span className="quiz-side-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-side-answer-option ${selectedAnswers[currentQuestionIndex] === 'C' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'C' })}
                                >
                                    <span className="quiz-side-answer-label">C.</span>
                                    <span className="quiz-side-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>

                                <button
                                    className={`quiz-side-answer-option ${selectedAnswers[currentQuestionIndex] === 'D' ? 'selected' : ''}`}
                                    onClick={() => setSelectedAnswers({ ...selectedAnswers, [currentQuestionIndex]: 'D' })}
                                >
                                    <span className="quiz-side-answer-label">D.</span>
                                    <span className="quiz-side-answer-text">
                                        TR·∫¢ L·ªúI.
                                    </span>
                                </button>
                            </div>
                        </div>

                        <div className="quiz-side-navigation">
                            <button
                                className="quiz-side-nav-btn quiz-side-hint-btn"
                                onClick={() => {
                                    // Toggle hint functionality
                                }}
                            >
                                G·ª£i √Ω
                            </button>
                            <button
                                className="quiz-side-nav-btn quiz-side-next-btn"
                                onClick={() => {
                                    if (currentQuestionIndex < 14) {
                                        setCurrentQuestionIndex(prev => prev + 1)
                                    }
                                }}
                            >
                                Ti·∫øp theo
                            </button>
                        </div>

                        <div className="quiz-side-modal-footer">
                            <button className="quiz-side-feedback-btn">
                                <ThumbsUp size={18} />
                                H·ªØu √≠ch
                            </button>
                            <button className="quiz-side-feedback-btn">
                                <ThumbsDown size={18} />
                                Kh√¥ng ph√π h·ª£p
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Customize Feature Modal */}
            {showCustomizeModal && (
                <div className="modal-overlay" onClick={() => setShowCustomizeModal(false)}>
                    <div className="customize-modal-content" style={{ maxWidth: '1000px' }} onClick={(e) => e.stopPropagation()}>
                        <div className="customize-modal-header">
                            <div className="customize-modal-title-wrapper">
                                <ClipboardCheck size={24} color="#5f6368" />
                                <h3 className="customize-modal-title">T√πy ch·ªânh th·∫ª th√¥ng tin</h3>
                            </div>
                            <button
                                className="customize-modal-close"
                                onClick={() => setShowCustomizeModal(false)}
                                aria-label="ƒê√≥ng"
                            >
                                √ó
                            </button>
                        </div>

                        {/* Tabs */}
                        <div className="customize-tabs">
                            <button
                                className={`customize-tab ${customizeTab === 'conversation' ? 'active' : ''}`}
                                onClick={() => setCustomizeTab('conversation')}
                            >
                                Theo n·ªôi dung cu·ªôc tr√≤ chuy·ªán
                            </button>
                            <button
                                className={`customize-tab ${customizeTab === 'course' ? 'active' : ''}`}
                                onClick={() => setCustomizeTab('course')}
                            >
                                Theo m√£ m√¥n h·ªçc
                            </button>
                        </div>

                        <div className="customize-modal-body">
                            {customizeTab === 'conversation' ? (
                                <>
                                    {/* S·ªë l∆∞·ª£ng th·∫ª */}
                                    <div className="customize-section">
                                        <h4 className="customize-section-title">S·ªë l∆∞·ª£ng th·∫ª</h4>
                                        <div className="customize-options" style={{ maxWidth: '50%' }}>
                                            <button
                                                className={`customize-option-btn ${cardQuantity === 3 ? 'selected' : ''}`}
                                                onClick={() => setCardQuantity(3)}
                                            >
                                                √çt h∆°n
                                            </button>
                                            <button
                                                className={`customize-option-btn ${cardQuantity === 6 ? 'selected' : ''}`}
                                                onClick={() => setCardQuantity(6)}
                                            >
                                                Ti√™u chu·∫©n
                                            </button>
                                            <button
                                                className={`customize-option-btn ${cardQuantity === 9 ? 'selected' : ''}`}
                                                onClick={() => setCardQuantity(9)}
                                            >
                                                Nhi·ªÅu h∆°n
                                            </button>
                                        </div>
                                    </div>

                                    {/* Ch·ªß ƒë·ªÅ n√™n l√† g√¨ */}
                                    <div className="customize-section">
                                        <h4 className="customize-section-title">M√¥ t·∫£</h4>
                                        <textarea
                                            className="customize-textarea"
                                            style={{ maxWidth: '98%' }}
                                            placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ ch·ªß ƒë·ªÅ"
                                            value={cardTopic}
                                            onChange={(e) => setCardTopic(e.target.value)}
                                            rows={6}
                                        />
                                    </div>
                                </>
                            ) : (
                                <>
                                    {/* S·ªë l∆∞·ª£ng th·∫ª v√† M√£ m√¥n h·ªçc tr√™n c√πng m·ªôt h√†ng */}
                                    <div className="customize-row">
                                        {/* S·ªë l∆∞·ª£ng th·∫ª */}
                                        <div className="customize-section">
                                            <h4 className="customize-section-title">S·ªë l∆∞·ª£ng th·∫ª</h4>
                                            <div className="customize-options">
                                                <button
                                                    className={`customize-option-btn ${cardQuantity === 3 ? 'selected' : ''}`}
                                                    onClick={() => setCardQuantity(3)}
                                                >
                                                    √çt h∆°n
                                                </button>
                                                <button
                                                    className={`customize-option-btn ${cardQuantity === 6 ? 'selected' : ''}`}
                                                    onClick={() => setCardQuantity(6)}
                                                >
                                                    Ti√™u chu·∫©n
                                                </button>
                                                <button
                                                    className={`customize-option-btn ${cardQuantity === 9 ? 'selected' : ''}`}
                                                    onClick={() => setCardQuantity(9)}
                                                >
                                                    Nhi·ªÅu h∆°n
                                                </button>
                                            </div>
                                        </div>

                                        {/* M√£ m√¥n h·ªçc */}
                                        <div className="customize-section">
                                            <h4 className="customize-section-title">Ch·ªçn m√£ m√¥n h·ªçc</h4>
                                            <div className="course-code-dropdown">
                                                <input
                                                    type="text"
                                                    className="course-code-search"
                                                    placeholder="T√¨m ki·∫øm m√£ m√¥n h·ªçc (VD: CSD, PRO, CSI...)"
                                                    value={courseSearchQuery}
                                                    onChange={(e) => {
                                                        setCourseSearchQuery(e.target.value)
                                                        setShowCourseDropdown(true)
                                                    }}
                                                    onFocus={() => setShowCourseDropdown(true)}
                                                />
                                                {courseSearchQuery && showCourseDropdown && (
                                                    <div className="course-code-options">
                                                        {courseCodes
                                                            .filter(course =>
                                                                course.code.toLowerCase().includes(courseSearchQuery.toLowerCase()) ||
                                                                course.name.toLowerCase().includes(courseSearchQuery.toLowerCase())
                                                            )
                                                            .map(course => (
                                                                <button
                                                                    key={course.code}
                                                                    className="course-code-option"
                                                                    onClick={() => {
                                                                        setSelectedCourseCode(course.code)
                                                                        setCourseSearchQuery(`${course.code} - ${course.name}`)
                                                                        setShowCourseDropdown(false)
                                                                    }}
                                                                >
                                                                    <span className="course-code">{course.code}</span>
                                                                    <span className="course-name">{course.name}</span>
                                                                </button>
                                                            ))
                                                        }
                                                        {courseCodes.filter(course =>
                                                            course.code.toLowerCase().includes(courseSearchQuery.toLowerCase()) ||
                                                            course.name.toLowerCase().includes(courseSearchQuery.toLowerCase())
                                                        ).length === 0 && (
                                                                <div className="course-code-no-results">
                                                                    Kh√¥ng t√¨m th·∫•y m√£ m√¥n h·ªçc
                                                                </div>
                                                            )}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </div>

                                    {/* M√¥ t·∫£ */}
                                    <div className="customize-section">
                                        <h4 className="customize-section-title">M√¥ t·∫£</h4>
                                        <textarea
                                            className="customize-textarea"
                                            style={{ maxWidth: '98%' }}
                                            placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ ch·ªß ƒë·ªÅ"
                                            value={cardTopic}
                                            onChange={(e) => setCardTopic(e.target.value)}
                                            rows={6}
                                        />
                                    </div>
                                </>
                            )}
                        </div>

                        <div className="customize-modal-footer">
                            <button
                                className="customize-create-btn"
                                onClick={handleCustomizeSubmit}
                            >
                                T·∫°o
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Share Modal */}
            {showShareModal && (
                <div className="modal-overlay" onClick={() => setShowShareModal(false)}>
                    <div className="share-modal-content" onClick={(e) => e.stopPropagation()} ref={shareModalRef}>
                        <div className="share-modal-header">
                            <div className="share-modal-title-section">
                                <Share2 size={20} color="#5f6368" />
                                <h3 className="share-modal-title">Chia s·∫ª cu·ªôc tr√≤ chuy·ªán</h3>
                            </div>
                            <button 
                                className="share-modal-close" 
                                onClick={() => setShowShareModal(false)}
                                aria-label="ƒê√≥ng"
                            >
                                √ó
                            </button>
                        </div>

                        <div className="share-modal-body">
                            {/* Add people input */}
                            <div className="share-input-section">
                                <input
                                    type="email"
                                    className="share-email-input"
                                    placeholder="Th√™m ng∆∞·ªùi d√πng v√† nh√≥m*"
                                    value={shareEmail}
                                    onChange={(e) => setShareEmail(e.target.value)}
                                />
                            </div>

                            {/* People with access */}
                            <div className="share-access-section">
                                <h4 className="share-section-title">Ng∆∞·ªùi c√≥ quy·ªÅn truy c·∫≠p</h4>
                                <div className="share-user-item">
                                    <div className="share-user-avatar">
                                        <img 
                                            src="https://ui-avatars.com/api/?name=Duc+Phan&background=4285F4&color=fff&size=40" 
                                            alt="ƒê·ª©c Phan"
                                        />
                                    </div>
                                    <div className="share-user-info">
                                        <div className="share-user-name">ƒê·ª©c Phan</div>
                                        <div className="share-user-email">phanminhduc23@gmail...</div>
                                    </div>
                                    <div className="share-user-role">
                                        <select className="share-role-select" disabled>
                                            <option value="owner">Ch·ªß s·ªü h·ªØu</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            {/* General access */}
                            <div className="share-general-section">
                                <h4 className="share-section-title">Quy·ªÅn truy c·∫≠p chung</h4>
                                <div className="share-access-control" ref={accessDropdownRef}>
                                    <div className="share-access-icon">
                                        {generalAccess === 'restricted' ? 'üîí' : 'üåê'}
                                    </div>
                                    <div className="share-access-info">
                                        <div className="share-access-title">
                                            {generalAccess === 'restricted' ? 'B·ªã h·∫°n ch·∫ø' : 'B·∫•t k·ª≥ ai c√≥ ƒë∆∞·ªùng li√™n k·∫øt'}
                                        </div>
                                        <div className="share-access-description">
                                            {generalAccess === 'restricted' 
                                                ? 'Ch·ªâ nh·ªØng ng∆∞·ªùi c√≥ quy·ªÅn truy c·∫≠p m·ªõi c√≥ th·ªÉ m·ªü b·∫±ng ƒë∆∞·ªùng li√™n k·∫øt n√†y'
                                                : 'B·∫•t k·ª≥ ai c√≥ ƒë∆∞·ªùng li√™n k·∫øt ƒë·ªÅu c√≥ th·ªÉ xem'
                                            }
                                        </div>
                                    </div>
                                    <button 
                                        className="share-access-dropdown"
                                        onClick={() => setShowAccessDropdown(!showAccessDropdown)}
                                    >
                                        <ChevronDown size={20} />
                                    </button>
                                    
                                    {/* Access Dropdown Menu */}
                                    {showAccessDropdown && (
                                        <div className="share-access-dropdown-menu">
                                            <button 
                                                className={`share-access-option ${generalAccess === 'restricted' ? 'active' : ''}`}
                                                onClick={() => {
                                                    setGeneralAccess('restricted')
                                                    setShowAccessDropdown(false)
                                                }}
                                            >
                                                <div className="share-access-option-icon">üîí</div>
                                                <div className="share-access-option-info">
                                                    <div className="share-access-option-title">B·ªã h·∫°n ch·∫ø</div>
                                                    <div className="share-access-option-desc">
                                                        Ch·ªâ nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c th√™m m·ªõi c√≥ quy·ªÅn truy c·∫≠p
                                                    </div>
                                                </div>
                                                {generalAccess === 'restricted' && (
                                                    <div className="share-access-option-check">‚úì</div>
                                                )}
                                            </button>
                                            <button 
                                                className={`share-access-option ${generalAccess === 'anyone' ? 'active' : ''}`}
                                                onClick={() => {
                                                    setGeneralAccess('anyone')
                                                    setShowAccessDropdown(false)
                                                }}
                                            >
                                                <div className="share-access-option-icon">üåê</div>
                                                <div className="share-access-option-info">
                                                    <div className="share-access-option-title">B·∫•t k·ª≥ ai c√≥ ƒë∆∞·ªùng li√™n k·∫øt</div>
                                                    <div className="share-access-option-desc">
                                                        B·∫•t k·ª≥ ai c√≥ ƒë∆∞·ªùng li√™n k·∫øt ƒë·ªÅu c√≥ th·ªÉ xem
                                                    </div>
                                                </div>
                                                {generalAccess === 'anyone' && (
                                                    <div className="share-access-option-check">‚úì</div>
                                                )}
                                            </button>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        <div className="share-modal-footer">
                            <button className="share-copy-link-btn" onClick={handleCopyLink}>
                                <LinkIcon size={18} />
                                Sao ch√©p ƒë∆∞·ªùng li√™n k·∫øt
                            </button>
                            <button 
                                className="share-done-btn"
                                onClick={() => setShowShareModal(false)}
                            >
                                L∆∞u
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}
